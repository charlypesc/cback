// <auto-generated />
using System;
using BackEndV1.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BackEndV1.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    [Migration("20220504044150_04-05-v1")]
    partial class _0405v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BackEndV1.Domain.Models.Cuestionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cuestionario");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<string>("Grado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NumeroNivel")
                        .HasColumnType("int");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Denuncia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAsignada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FolioInterno")
                        .HasColumnType("int");

                    b.Property<string>("FolioRit")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Organismo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Profesional")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RutAsociado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Denuncia");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Establecimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Comuna")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreEstablecimiento")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Rbd")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Establecimiento");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Estudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Alergias")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Apoderado")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ApoderadoSuplente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Comuna")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContactoEmergencia")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Correo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CorreoApoderado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CorreoApoderadoSuplente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Curso")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DireccionApoderado")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DireccionApoderadoSuplente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EnfermedadesCronicas")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Establecimiento")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GrupoSanguineo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MedicamentosContraindicados")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Nacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NumeroLista")
                        .HasColumnType("int");

                    b.Property<bool>("Pie")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Prevision")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Run")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Seguimiento")
                        .HasColumnType("int");

                    b.Property<string>("Sexo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TelefonoApoderado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TelefonoApoderadoSuplente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TelefonoEmergencia")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("anoCursando")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Estudiante");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Establecimiento")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rbd")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ListaDoctosDenuncia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Asunto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DenunciaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdPropioDoc")
                        .HasColumnType("int");

                    b.Property<string>("Profesional")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TipoDoc")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TipoReunion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DenunciaId");

                    b.ToTable("ListaDoctosDenuncia");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ParticipanteManual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Asunto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreParticipante")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ReunionesId")
                        .HasColumnType("int");

                    b.Property<string>("Rut")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ReunionesId");

                    b.ToTable("ParticipanteManual");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ParticipanteReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Asunto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreParticipante")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RegistroId")
                        .HasColumnType("int");

                    b.Property<string>("Rut")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistroId");

                    b.ToTable("ParticipanteReg");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Pregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CuestionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CuestionarioId");

                    b.ToTable("Pregunta");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Programa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DescripcionPrograma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NombrePrograma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("fechaCreacionPrograma")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Programa");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ProtocoloReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionProtocolo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NombreProtocolo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProtocoloId")
                        .HasColumnType("int");

                    b.Property<int>("RegistroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistroId");

                    b.ToTable("ProtocoloReg");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ProtocoloReu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionProtocolo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NombreProtocolo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProtocoloId")
                        .HasColumnType("int");

                    b.Property<int>("ReunionesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReunionesId");

                    b.ToTable("ProtocolosReu");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ProtocolosActuacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionProtocolo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NombreEstablecimiento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NombreProtocolo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ProtocoloActuacion");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Registro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Acuerdos")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Antecedentes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fecha")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Folio")
                        .HasColumnType("int");

                    b.Property<string>("Profesional")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Registro");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Respuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PreguntaId")
                        .HasColumnType("int");

                    b.Property<bool>("esCorrecta")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaId");

                    b.ToTable("Respuesta");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.RespuestaCuestionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<int>("CuestionarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombrePartipantes")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CuestionarioId");

                    b.ToTable("RespuestaCuestionario");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.RespuestaCuestionarioDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RespuestaCuestionarioId")
                        .HasColumnType("int");

                    b.Property<int>("RespuestaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RespuestaCuestionarioId");

                    b.HasIndex("RespuestaId");

                    b.ToTable("RespuestaCuestionarioDetalles");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Reuniones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Acuerdos")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Antecedentes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fecha")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Folio")
                        .HasColumnType("int");

                    b.Property<string>("Profesional")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rbd")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RutAsociado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Tipo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TipoReunion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Reuniones");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Seguimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFinSeguimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicioSeguimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nota")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("rutEstudiante")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Seguimiento");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.SeguimientoProg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEgreso")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombrePrograma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NotaPrograma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SeguimientoId")
                        .HasColumnType("int");

                    b.Property<string>("ingresadoPor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SeguimientoId");

                    b.ToTable("SeguimientoProg");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Tematicas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Tematica")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Tematicas");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.TematicasReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NumeroId")
                        .HasColumnType("int");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RegistroId")
                        .HasColumnType("int");

                    b.Property<string>("Tematica")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TipoFormulario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RegistroId");

                    b.ToTable("TematicasReg");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.TematicasReu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NumeroId")
                        .HasColumnType("int");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ReunionesId")
                        .HasColumnType("int");

                    b.Property<string>("Tematica")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TipoFormulario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ReunionesId");

                    b.ToTable("TematicasReu");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Establecimiento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nivel")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Prueba")
                        .HasColumnType("int");

                    b.Property<string>("Rbd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rut")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Cuestionario", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ListaDoctosDenuncia", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Denuncia", "Denuncia")
                        .WithMany("ListaDoctosDenuncia")
                        .HasForeignKey("DenunciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ParticipanteManual", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Reuniones", "Reuniones")
                        .WithMany("ParticipanteManual")
                        .HasForeignKey("ReunionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ParticipanteReg", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Registro", "Registro")
                        .WithMany("ParticipanteReg")
                        .HasForeignKey("RegistroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Pregunta", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Cuestionario", "Cuestionario")
                        .WithMany("listPreguntas")
                        .HasForeignKey("CuestionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ProtocoloReg", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Registro", "Registro")
                        .WithMany("ProtocoloReg")
                        .HasForeignKey("RegistroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.ProtocoloReu", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Reuniones", "Reuniones")
                        .WithMany("ProtocoloReu")
                        .HasForeignKey("ReunionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Registro", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Respuesta", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Pregunta", "Pregunta")
                        .WithMany("listRespuesta")
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.RespuestaCuestionario", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Cuestionario", "Cuestionario")
                        .WithMany()
                        .HasForeignKey("CuestionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.RespuestaCuestionarioDetalle", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.RespuestaCuestionario", "RespuestaCuestionario")
                        .WithMany("ListCuestionarioDetalle")
                        .HasForeignKey("RespuestaCuestionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndV1.Domain.Models.Respuesta", "Respuesta")
                        .WithMany()
                        .HasForeignKey("RespuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.Reuniones", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.SeguimientoProg", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Seguimiento", "Seguimiento")
                        .WithMany("SeguimientoProg")
                        .HasForeignKey("SeguimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.TematicasReg", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Registro", "Registro")
                        .WithMany("TematicasReg")
                        .HasForeignKey("RegistroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndV1.Domain.Models.TematicasReu", b =>
                {
                    b.HasOne("BackEndV1.Domain.Models.Reuniones", "Reuniones")
                        .WithMany("TematicasReu")
                        .HasForeignKey("ReunionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
